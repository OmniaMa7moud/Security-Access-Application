
SPIMASTER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000038  00800060  000008c0  00000954  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  00800098  00800098  0000098c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000098c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  000009f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d26  00000000  00000000  00000ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b42  00000000  00000000  000028c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000177b  00000000  00000000  00003408  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000037c  00000000  00000000  00004b84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005390  00000000  00000000  00004f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001094  00000000  00000000  0000a290  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  0000b324  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00001aff  00000000  00000000  0000b48c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	42 c0       	rjmp	.+132    	; 0x8a <__bad_interrupt>
   6:	00 00       	nop
   8:	40 c0       	rjmp	.+128    	; 0x8a <__bad_interrupt>
   a:	00 00       	nop
   c:	3e c0       	rjmp	.+124    	; 0x8a <__bad_interrupt>
   e:	00 00       	nop
  10:	3c c0       	rjmp	.+120    	; 0x8a <__bad_interrupt>
  12:	00 00       	nop
  14:	3a c0       	rjmp	.+116    	; 0x8a <__bad_interrupt>
  16:	00 00       	nop
  18:	38 c0       	rjmp	.+112    	; 0x8a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	36 c0       	rjmp	.+108    	; 0x8a <__bad_interrupt>
  1e:	00 00       	nop
  20:	34 c0       	rjmp	.+104    	; 0x8a <__bad_interrupt>
  22:	00 00       	nop
  24:	32 c0       	rjmp	.+100    	; 0x8a <__bad_interrupt>
  26:	00 00       	nop
  28:	30 c0       	rjmp	.+96     	; 0x8a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2e c0       	rjmp	.+92     	; 0x8a <__bad_interrupt>
  2e:	00 00       	nop
  30:	cd c2       	rjmp	.+1434   	; 0x5cc <__vector_12>
  32:	00 00       	nop
  34:	2a c0       	rjmp	.+84     	; 0x8a <__bad_interrupt>
  36:	00 00       	nop
  38:	28 c0       	rjmp	.+80     	; 0x8a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	26 c0       	rjmp	.+76     	; 0x8a <__bad_interrupt>
  3e:	00 00       	nop
  40:	24 c0       	rjmp	.+72     	; 0x8a <__bad_interrupt>
  42:	00 00       	nop
  44:	22 c0       	rjmp	.+68     	; 0x8a <__bad_interrupt>
  46:	00 00       	nop
  48:	20 c0       	rjmp	.+64     	; 0x8a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1e c0       	rjmp	.+60     	; 0x8a <__bad_interrupt>
  4e:	00 00       	nop
  50:	1c c0       	rjmp	.+56     	; 0x8a <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ec       	ldi	r30, 0xC0	; 192
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 39       	cpi	r26, 0x98	; 152
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e9       	ldi	r26, 0x98	; 152
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 3b       	cpi	r26, 0xB2	; 178
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	86 d0       	rcall	.+268    	; 0x194 <main>
  88:	19 c4       	rjmp	.+2098   	; 0x8bc <_exit>

0000008a <__bad_interrupt>:
  8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <AccessSecurity>:
	u8 randNum[9];
	u8 inputArr[9];
    u8 securityFlag = 0;

void AccessSecurity(void)
{
  8c:	8f 92       	push	r8
  8e:	9f 92       	push	r9
  90:	af 92       	push	r10
  92:	bf 92       	push	r11
  94:	ef 92       	push	r14
  96:	ff 92       	push	r15
  98:	0f 93       	push	r16
  9a:	1f 93       	push	r17
  9c:	cf 93       	push	r28
  9e:	df 93       	push	r29
	
	UART_receiveString(inputArr);
  a0:	80 ea       	ldi	r24, 0xA0	; 160
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	ea d2       	rcall	.+1492   	; 0x67a <UART_receiveString>
	if( !strcmp( inputArr,  "2701" ) )
  a6:	64 e6       	ldi	r22, 0x64	; 100
  a8:	70 e0       	ldi	r23, 0x00	; 0
  aa:	80 ea       	ldi	r24, 0xA0	; 160
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	de d3       	rcall	.+1980   	; 0x86c <strcmp>
  b0:	89 2b       	or	r24, r25
  b2:	09 f0       	breq	.+2      	; 0xb6 <AccessSecurity+0x2a>
  b4:	64 c0       	rjmp	.+200    	; 0x17e <AccessSecurity+0xf2>
	{
		LCD_instruction(CLEAR_DISPLAY);
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	b1 d0       	rcall	.+354    	; 0x21c <LCD_instruction>
		 LCD_MOVE_CURSOR(1,1);
  ba:	61 e0       	ldi	r22, 0x01	; 1
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	b3 d1       	rcall	.+870    	; 0x426 <LCD_MOVE_CURSOR>
		 LCD_SEND_STRING("6701 ");
  c0:	89 e6       	ldi	r24, 0x69	; 105
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	a2 d1       	rcall	.+836    	; 0x40a <LCD_SEND_STRING>
  c6:	c9 ea       	ldi	r28, 0xA9	; 169
  c8:	d0 e0       	ldi	r29, 0x00	; 0
  ca:	01 eb       	ldi	r16, 0xB1	; 177
  cc:	10 e0       	ldi	r17, 0x00	; 0
  ce:	7e 01       	movw	r14, r28
  d0:	0f 2e       	mov	r0, r31
		for(u8 i=0; i<8; i++) { randNum[i] =  (random() % 10); randNum[i] += 48;}
  d2:	fa e0       	ldi	r31, 0x0A	; 10
  d4:	8f 2e       	mov	r8, r31
  d6:	91 2c       	mov	r9, r1
  d8:	a1 2c       	mov	r10, r1
  da:	b1 2c       	mov	r11, r1
  dc:	f0 2d       	mov	r31, r0
  de:	72 d3       	rcall	.+1764   	; 0x7c4 <random>
  e0:	a5 01       	movw	r20, r10
  e2:	94 01       	movw	r18, r8
  e4:	e9 d2       	rcall	.+1490   	; 0x6b8 <__divmodsi4>
  e6:	60 5d       	subi	r22, 0xD0	; 208
  e8:	f7 01       	movw	r30, r14
  ea:	61 93       	st	Z+, r22
  ec:	7f 01       	movw	r14, r30
  ee:	0e 17       	cp	r16, r30
  f0:	1f 07       	cpc	r17, r31
  f2:	a9 f7       	brne	.-22     	; 0xde <AccessSecurity+0x52>
  f4:	0f 2e       	mov	r0, r31
  f6:	f9 ea       	ldi	r31, 0xA9	; 169
  f8:	ef 2e       	mov	r14, r31
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	ff 2e       	mov	r15, r31
  fe:	f0 2d       	mov	r31, r0
		for(u8 i=0; i<8; i++) { LCD_write_char(randNum[i]);}
 100:	f7 01       	movw	r30, r14
 102:	81 91       	ld	r24, Z+
 104:	7f 01       	movw	r14, r30
 106:	21 d1       	rcall	.+578    	; 0x34a <LCD_write_char>
 108:	0e 15       	cp	r16, r14
 10a:	1f 05       	cpc	r17, r15
 10c:	c9 f7       	brne	.-14     	; 0x100 <AccessSecurity+0x74>
 10e:	90 e3       	ldi	r25, 0x30	; 48
		for(u8 i=0; i<8; i++) {   if(randNum[i] == '9'){randNum[i] = '0'; continue;} randNum[i]++; }
 110:	88 81       	ld	r24, Y
 112:	89 33       	cpi	r24, 0x39	; 57
 114:	11 f4       	brne	.+4      	; 0x11a <AccessSecurity+0x8e>
 116:	98 83       	st	Y, r25
 118:	02 c0       	rjmp	.+4      	; 0x11e <AccessSecurity+0x92>
 11a:	8f 5f       	subi	r24, 0xFF	; 255
 11c:	88 83       	st	Y, r24
 11e:	21 96       	adiw	r28, 0x01	; 1
 120:	0c 17       	cp	r16, r28
 122:	1d 07       	cpc	r17, r29
 124:	a9 f7       	brne	.-22     	; 0x110 <AccessSecurity+0x84>
 126:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <randNum+0x8>
		randNum[8] = '\0';
 12a:	e0 ea       	ldi	r30, 0xA0	; 160
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	88 ea       	ldi	r24, 0xA8	; 168
 130:	90 e0       	ldi	r25, 0x00	; 0
		for(u8 i=0; i<8; i++) { inputArr[i] = 0;}
 132:	11 92       	st	Z+, r1
 134:	e8 17       	cp	r30, r24
 136:	f9 07       	cpc	r31, r25
		UART_receiveString(request);
 138:	e1 f7       	brne	.-8      	; 0x132 <AccessSecurity+0xa6>
 13a:	8b e9       	ldi	r24, 0x9B	; 155
 13c:	90 e0       	ldi	r25, 0x00	; 0
		UART_receiveString(inputArr);
 13e:	9d d2       	rcall	.+1338   	; 0x67a <UART_receiveString>
 140:	80 ea       	ldi	r24, 0xA0	; 160
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	9a d2       	rcall	.+1332   	; 0x67a <UART_receiveString>
		if( /* (!strcmp( request, "2702 ")) && */(!strcmp( inputArr, randNum)) ) 
 146:	69 ea       	ldi	r22, 0xA9	; 169
 148:	70 e0       	ldi	r23, 0x00	; 0
 14a:	80 ea       	ldi	r24, 0xA0	; 160
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	8e d3       	rcall	.+1820   	; 0x86c <strcmp>
 150:	89 2b       	or	r24, r25
		{   securityFlag = 1;
 152:	59 f4       	brne	.+22     	; 0x16a <AccessSecurity+0xde>
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__data_end>
			LCD_instruction(CLEAR_DISPLAY); 
			LCD_MOVE_CURSOR(1,1);
 15a:	60 d0       	rcall	.+192    	; 0x21c <LCD_instruction>
 15c:	61 e0       	ldi	r22, 0x01	; 1
 15e:	81 e0       	ldi	r24, 0x01	; 1
			LCD_SEND_STRING("6701 ");
 160:	62 d1       	rcall	.+708    	; 0x426 <LCD_MOVE_CURSOR>
 162:	89 e6       	ldi	r24, 0x69	; 105
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	51 d1       	rcall	.+674    	; 0x40a <LCD_SEND_STRING>
		}
		else
		{   securityFlag = 0;
 168:	0a c0       	rjmp	.+20     	; 0x17e <AccessSecurity+0xf2>
 16a:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__data_end>
			LCD_instruction(CLEAR_DISPLAY);
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	55 d0       	rcall	.+170    	; 0x21c <LCD_instruction>
			LCD_MOVE_CURSOR(1,1);
 172:	61 e0       	ldi	r22, 0x01	; 1
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	57 d1       	rcall	.+686    	; 0x426 <LCD_MOVE_CURSOR>
 178:	8f e6       	ldi	r24, 0x6F	; 111
			LCD_SEND_STRING("7F 27 35 ");
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	46 d1       	rcall	.+652    	; 0x40a <LCD_SEND_STRING>
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
		}
	}
}
 182:	1f 91       	pop	r17
 184:	0f 91       	pop	r16
 186:	ff 90       	pop	r15
 188:	ef 90       	pop	r14
 18a:	bf 90       	pop	r11
 18c:	af 90       	pop	r10
 18e:	9f 90       	pop	r9
 190:	8f 90       	pop	r8
 192:	08 95       	ret

00000194 <main>:
 194:	71 d1       	rcall	.+738    	; 0x478 <DIO_init>
 196:	35 d0       	rcall	.+106    	; 0x202 <KEYPAD_INIT>

int main()
{
	DIO_init();
	KEYPAD_INIT();
	LCD_INIT();
 198:	a1 d0       	rcall	.+322    	; 0x2dc <LCD_INIT>
 19a:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19c:	84 e3       	ldi	r24, 0x34	; 52
 19e:	9c e0       	ldi	r25, 0x0C	; 12
 1a0:	21 50       	subi	r18, 0x01	; 1
 1a2:	80 40       	sbci	r24, 0x00	; 0
 1a4:	90 40       	sbci	r25, 0x00	; 0
 1a6:	e1 f7       	brne	.-8      	; 0x1a0 <main+0xc>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <main+0x16>
 1aa:	00 00       	nop
	_delay_ms(500);
	UART_init(9600);
 1ac:	80 e8       	ldi	r24, 0x80	; 128
 1ae:	95 e2       	ldi	r25, 0x25	; 37
	UART_RX_ENABLE();
 1b0:	36 d2       	rcall	.+1132   	; 0x61e <UART_init>
	UART_TX_ENABLE();
 1b2:	5b d2       	rcall	.+1206   	; 0x66a <UART_RX_ENABLE>
 1b4:	5c d2       	rcall	.+1208   	; 0x66e <UART_TX_ENABLE>
	

	while(1)
	{
		UART_receiveString(inputArr);
 1b6:	80 ea       	ldi	r24, 0xA0	; 160
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	5f d2       	rcall	.+1214   	; 0x67a <UART_receiveString>
		if( !strcmp( inputArr,  "3101AA00" ) )
 1bc:	69 e7       	ldi	r22, 0x79	; 121
 1be:	70 e0       	ldi	r23, 0x00	; 0
 1c0:	80 ea       	ldi	r24, 0xA0	; 160
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	53 d3       	rcall	.+1702   	; 0x86c <strcmp>
 1c6:	89 2b       	or	r24, r25
 1c8:	b1 f7       	brne	.-20     	; 0x1b6 <main+0x22>
		{
			if(securityFlag == 0)
 1ca:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <__data_end>
 1ce:	81 11       	cpse	r24, r1
			{
			 LCD_instruction(CLEAR_DISPLAY); 
 1d0:	0a c0       	rjmp	.+20     	; 0x1e6 <main+0x52>
 1d2:	81 e0       	ldi	r24, 0x01	; 1
			 LCD_MOVE_CURSOR(1,1);
 1d4:	23 d0       	rcall	.+70     	; 0x21c <LCD_instruction>
 1d6:	61 e0       	ldi	r22, 0x01	; 1
 1d8:	81 e0       	ldi	r24, 0x01	; 1
			 LCD_SEND_STRING("NRC 7F 31 35"); 
 1da:	25 d1       	rcall	.+586    	; 0x426 <LCD_MOVE_CURSOR>
 1dc:	82 e8       	ldi	r24, 0x82	; 130
 1de:	90 e0       	ldi	r25, 0x00	; 0
			  AccessSecurity();
 1e0:	14 d1       	rcall	.+552    	; 0x40a <LCD_SEND_STRING>
 1e2:	54 df       	rcall	.-344    	; 0x8c <AccessSecurity>
 1e4:	e8 cf       	rjmp	.-48     	; 0x1b6 <main+0x22>
			 //UART_String_Transmit("NRC 7F 31 35");
			 }
			 else if(securityFlag == 1)
 1e6:	81 30       	cpi	r24, 0x01	; 1
			 {
				  LCD_instruction(CLEAR_DISPLAY);
 1e8:	31 f7       	brne	.-52     	; 0x1b6 <main+0x22>
 1ea:	18 d0       	rcall	.+48     	; 0x21c <LCD_instruction>
				  LCD_MOVE_CURSOR(1,1);
 1ec:	61 e0       	ldi	r22, 0x01	; 1
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	1a d1       	rcall	.+564    	; 0x426 <LCD_MOVE_CURSOR>
 1f2:	8f e8       	ldi	r24, 0x8F	; 143
				  LCD_SEND_STRING("7101AA00");
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	09 d1       	rcall	.+530    	; 0x40a <LCD_SEND_STRING>
 1f8:	41 e0       	ldi	r20, 0x01	; 1
 1fa:	60 e0       	ldi	r22, 0x00	; 0
				 // UART_String_Transmit("7101AA00");
				 DIO_SetPinVal(PC, 0, 1);
 1fc:	82 e0       	ldi	r24, 0x02	; 2
 1fe:	45 d1       	rcall	.+650    	; 0x48a <DIO_SetPinVal>
 200:	da cf       	rjmp	.-76     	; 0x1b6 <main+0x22>

00000202 <KEYPAD_INIT>:

u8 arr[4][4] = { {'7','8','9','/'},  {'4','5','6','*'}, {'1','2','3','-'}, {'A','0','=','+'}};

void KEYPAD_INIT()
{
	DIO_EN_PULLUP(COLS_PORT, COL1);
 202:	67 e0       	ldi	r22, 0x07	; 7
 204:	83 e0       	ldi	r24, 0x03	; 3
 206:	ae d1       	rcall	.+860    	; 0x564 <DIO_EN_PULLUP>
	DIO_EN_PULLUP(COLS_PORT, COL2);
 208:	66 e0       	ldi	r22, 0x06	; 6
 20a:	83 e0       	ldi	r24, 0x03	; 3
 20c:	ab d1       	rcall	.+854    	; 0x564 <DIO_EN_PULLUP>
	DIO_EN_PULLUP(COLS_PORT, COL3);
 20e:	65 e0       	ldi	r22, 0x05	; 5
 210:	83 e0       	ldi	r24, 0x03	; 3
 212:	a8 d1       	rcall	.+848    	; 0x564 <DIO_EN_PULLUP>
	DIO_EN_PULLUP(COLS_PORT, COL4);
 214:	63 e0       	ldi	r22, 0x03	; 3
 216:	83 e0       	ldi	r24, 0x03	; 3
 218:	a5 c1       	rjmp	.+842    	; 0x564 <DIO_EN_PULLUP>
 21a:	08 95       	ret

0000021c <LCD_instruction>:
 21c:	cf 93       	push	r28
 21e:	c8 2f       	mov	r28, r24
 220:	40 e0       	ldi	r20, 0x00	; 0
 222:	64 e0       	ldi	r22, 0x04	; 4
 224:	83 e0       	ldi	r24, 0x03	; 3
 226:	31 d1       	rcall	.+610    	; 0x48a <DIO_SetPinVal>
 228:	c4 fb       	bst	r28, 4
 22a:	44 27       	eor	r20, r20
 22c:	40 f9       	bld	r20, 0
 22e:	64 e0       	ldi	r22, 0x04	; 4
 230:	82 e0       	ldi	r24, 0x02	; 2
 232:	2b d1       	rcall	.+598    	; 0x48a <DIO_SetPinVal>
 234:	c5 fb       	bst	r28, 5
 236:	44 27       	eor	r20, r20
 238:	40 f9       	bld	r20, 0
 23a:	65 e0       	ldi	r22, 0x05	; 5
 23c:	82 e0       	ldi	r24, 0x02	; 2
 23e:	25 d1       	rcall	.+586    	; 0x48a <DIO_SetPinVal>
 240:	c6 fb       	bst	r28, 6
 242:	44 27       	eor	r20, r20
 244:	40 f9       	bld	r20, 0
 246:	66 e0       	ldi	r22, 0x06	; 6
 248:	82 e0       	ldi	r24, 0x02	; 2
 24a:	1f d1       	rcall	.+574    	; 0x48a <DIO_SetPinVal>
 24c:	4c 2f       	mov	r20, r28
 24e:	44 1f       	adc	r20, r20
 250:	44 27       	eor	r20, r20
 252:	44 1f       	adc	r20, r20
 254:	67 e0       	ldi	r22, 0x07	; 7
 256:	82 e0       	ldi	r24, 0x02	; 2
 258:	18 d1       	rcall	.+560    	; 0x48a <DIO_SetPinVal>
 25a:	41 e0       	ldi	r20, 0x01	; 1
 25c:	66 e0       	ldi	r22, 0x06	; 6
 25e:	83 e0       	ldi	r24, 0x03	; 3
 260:	14 d1       	rcall	.+552    	; 0x48a <DIO_SetPinVal>
 262:	83 ef       	ldi	r24, 0xF3	; 243
 264:	91 e0       	ldi	r25, 0x01	; 1
 266:	01 97       	sbiw	r24, 0x01	; 1
 268:	f1 f7       	brne	.-4      	; 0x266 <LCD_instruction+0x4a>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <LCD_instruction+0x50>
 26c:	00 00       	nop
 26e:	40 e0       	ldi	r20, 0x00	; 0
 270:	66 e0       	ldi	r22, 0x06	; 6
 272:	83 e0       	ldi	r24, 0x03	; 3
 274:	0a d1       	rcall	.+532    	; 0x48a <DIO_SetPinVal>
 276:	83 ef       	ldi	r24, 0xF3	; 243
 278:	91 e0       	ldi	r25, 0x01	; 1
 27a:	01 97       	sbiw	r24, 0x01	; 1
 27c:	f1 f7       	brne	.-4      	; 0x27a <LCD_instruction+0x5e>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <LCD_instruction+0x64>
 280:	00 00       	nop
 282:	4c 2f       	mov	r20, r28
 284:	41 70       	andi	r20, 0x01	; 1
 286:	64 e0       	ldi	r22, 0x04	; 4
 288:	82 e0       	ldi	r24, 0x02	; 2
 28a:	ff d0       	rcall	.+510    	; 0x48a <DIO_SetPinVal>
 28c:	c1 fb       	bst	r28, 1
 28e:	44 27       	eor	r20, r20
 290:	40 f9       	bld	r20, 0
 292:	65 e0       	ldi	r22, 0x05	; 5
 294:	82 e0       	ldi	r24, 0x02	; 2
 296:	f9 d0       	rcall	.+498    	; 0x48a <DIO_SetPinVal>
 298:	c2 fb       	bst	r28, 2
 29a:	44 27       	eor	r20, r20
 29c:	40 f9       	bld	r20, 0
 29e:	66 e0       	ldi	r22, 0x06	; 6
 2a0:	82 e0       	ldi	r24, 0x02	; 2
 2a2:	f3 d0       	rcall	.+486    	; 0x48a <DIO_SetPinVal>
 2a4:	c3 fb       	bst	r28, 3
 2a6:	44 27       	eor	r20, r20
 2a8:	40 f9       	bld	r20, 0
 2aa:	67 e0       	ldi	r22, 0x07	; 7
 2ac:	82 e0       	ldi	r24, 0x02	; 2
 2ae:	ed d0       	rcall	.+474    	; 0x48a <DIO_SetPinVal>
 2b0:	41 e0       	ldi	r20, 0x01	; 1
 2b2:	66 e0       	ldi	r22, 0x06	; 6
 2b4:	83 e0       	ldi	r24, 0x03	; 3
 2b6:	e9 d0       	rcall	.+466    	; 0x48a <DIO_SetPinVal>
 2b8:	83 ef       	ldi	r24, 0xF3	; 243
 2ba:	91 e0       	ldi	r25, 0x01	; 1
 2bc:	01 97       	sbiw	r24, 0x01	; 1
 2be:	f1 f7       	brne	.-4      	; 0x2bc <LCD_instruction+0xa0>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <LCD_instruction+0xa6>
 2c2:	00 00       	nop
 2c4:	40 e0       	ldi	r20, 0x00	; 0
 2c6:	66 e0       	ldi	r22, 0x06	; 6
 2c8:	83 e0       	ldi	r24, 0x03	; 3
 2ca:	df d0       	rcall	.+446    	; 0x48a <DIO_SetPinVal>
 2cc:	83 ef       	ldi	r24, 0xF3	; 243
 2ce:	91 e0       	ldi	r25, 0x01	; 1
 2d0:	01 97       	sbiw	r24, 0x01	; 1
 2d2:	f1 f7       	brne	.-4      	; 0x2d0 <LCD_instruction+0xb4>
 2d4:	00 c0       	rjmp	.+0      	; 0x2d6 <LCD_instruction+0xba>
 2d6:	00 00       	nop
 2d8:	cf 91       	pop	r28
 2da:	08 95       	ret

000002dc <LCD_INIT>:
 2dc:	8f e0       	ldi	r24, 0x0F	; 15
 2de:	97 e2       	ldi	r25, 0x27	; 39
 2e0:	01 97       	sbiw	r24, 0x01	; 1
 2e2:	f1 f7       	brne	.-4      	; 0x2e0 <LCD_INIT+0x4>
 2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <LCD_INIT+0xa>
 2e6:	00 00       	nop
 2e8:	83 e3       	ldi	r24, 0x33	; 51
 2ea:	98 df       	rcall	.-208    	; 0x21c <LCD_instruction>
 2ec:	89 ef       	ldi	r24, 0xF9	; 249
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	01 97       	sbiw	r24, 0x01	; 1
 2f2:	f1 f7       	brne	.-4      	; 0x2f0 <LCD_INIT+0x14>
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <LCD_INIT+0x1a>
 2f6:	00 00       	nop
 2f8:	82 e3       	ldi	r24, 0x32	; 50
 2fa:	90 df       	rcall	.-224    	; 0x21c <LCD_instruction>
 2fc:	89 ef       	ldi	r24, 0xF9	; 249
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	01 97       	sbiw	r24, 0x01	; 1
 302:	f1 f7       	brne	.-4      	; 0x300 <LCD_INIT+0x24>
 304:	00 c0       	rjmp	.+0      	; 0x306 <LCD_INIT+0x2a>
 306:	00 00       	nop
 308:	88 e2       	ldi	r24, 0x28	; 40
 30a:	88 df       	rcall	.-240    	; 0x21c <LCD_instruction>
 30c:	89 ef       	ldi	r24, 0xF9	; 249
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	01 97       	sbiw	r24, 0x01	; 1
 312:	f1 f7       	brne	.-4      	; 0x310 <LCD_INIT+0x34>
 314:	00 c0       	rjmp	.+0      	; 0x316 <LCD_INIT+0x3a>
 316:	00 00       	nop
 318:	8c e0       	ldi	r24, 0x0C	; 12
 31a:	80 df       	rcall	.-256    	; 0x21c <LCD_instruction>
 31c:	89 ef       	ldi	r24, 0xF9	; 249
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	01 97       	sbiw	r24, 0x01	; 1
 322:	f1 f7       	brne	.-4      	; 0x320 <LCD_INIT+0x44>
 324:	00 c0       	rjmp	.+0      	; 0x326 <LCD_INIT+0x4a>
 326:	00 00       	nop
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	78 df       	rcall	.-272    	; 0x21c <LCD_instruction>
 32c:	89 ef       	ldi	r24, 0xF9	; 249
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	01 97       	sbiw	r24, 0x01	; 1
 332:	f1 f7       	brne	.-4      	; 0x330 <LCD_INIT+0x54>
 334:	00 c0       	rjmp	.+0      	; 0x336 <LCD_INIT+0x5a>
 336:	00 00       	nop
 338:	82 e0       	ldi	r24, 0x02	; 2
 33a:	70 df       	rcall	.-288    	; 0x21c <LCD_instruction>
 33c:	89 ef       	ldi	r24, 0xF9	; 249
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	01 97       	sbiw	r24, 0x01	; 1
 342:	f1 f7       	brne	.-4      	; 0x340 <LCD_INIT+0x64>
 344:	00 c0       	rjmp	.+0      	; 0x346 <LCD_INIT+0x6a>
 346:	00 00       	nop
 348:	08 95       	ret

0000034a <LCD_write_char>:
 34a:	cf 93       	push	r28
 34c:	c8 2f       	mov	r28, r24
 34e:	41 e0       	ldi	r20, 0x01	; 1
 350:	64 e0       	ldi	r22, 0x04	; 4
 352:	83 e0       	ldi	r24, 0x03	; 3
 354:	9a d0       	rcall	.+308    	; 0x48a <DIO_SetPinVal>
 356:	c4 fb       	bst	r28, 4
 358:	44 27       	eor	r20, r20
 35a:	40 f9       	bld	r20, 0
 35c:	64 e0       	ldi	r22, 0x04	; 4
 35e:	82 e0       	ldi	r24, 0x02	; 2
 360:	94 d0       	rcall	.+296    	; 0x48a <DIO_SetPinVal>
 362:	c5 fb       	bst	r28, 5
 364:	44 27       	eor	r20, r20
 366:	40 f9       	bld	r20, 0
 368:	65 e0       	ldi	r22, 0x05	; 5
 36a:	82 e0       	ldi	r24, 0x02	; 2
 36c:	8e d0       	rcall	.+284    	; 0x48a <DIO_SetPinVal>
 36e:	c6 fb       	bst	r28, 6
 370:	44 27       	eor	r20, r20
 372:	40 f9       	bld	r20, 0
 374:	66 e0       	ldi	r22, 0x06	; 6
 376:	82 e0       	ldi	r24, 0x02	; 2
 378:	88 d0       	rcall	.+272    	; 0x48a <DIO_SetPinVal>
 37a:	4c 2f       	mov	r20, r28
 37c:	44 1f       	adc	r20, r20
 37e:	44 27       	eor	r20, r20
 380:	44 1f       	adc	r20, r20
 382:	67 e0       	ldi	r22, 0x07	; 7
 384:	82 e0       	ldi	r24, 0x02	; 2
 386:	81 d0       	rcall	.+258    	; 0x48a <DIO_SetPinVal>
 388:	41 e0       	ldi	r20, 0x01	; 1
 38a:	66 e0       	ldi	r22, 0x06	; 6
 38c:	83 e0       	ldi	r24, 0x03	; 3
 38e:	7d d0       	rcall	.+250    	; 0x48a <DIO_SetPinVal>
 390:	83 ef       	ldi	r24, 0xF3	; 243
 392:	91 e0       	ldi	r25, 0x01	; 1
 394:	01 97       	sbiw	r24, 0x01	; 1
 396:	f1 f7       	brne	.-4      	; 0x394 <LCD_write_char+0x4a>
 398:	00 c0       	rjmp	.+0      	; 0x39a <LCD_write_char+0x50>
 39a:	00 00       	nop
 39c:	40 e0       	ldi	r20, 0x00	; 0
 39e:	66 e0       	ldi	r22, 0x06	; 6
 3a0:	83 e0       	ldi	r24, 0x03	; 3
 3a2:	73 d0       	rcall	.+230    	; 0x48a <DIO_SetPinVal>
 3a4:	83 ef       	ldi	r24, 0xF3	; 243
 3a6:	91 e0       	ldi	r25, 0x01	; 1
 3a8:	01 97       	sbiw	r24, 0x01	; 1
 3aa:	f1 f7       	brne	.-4      	; 0x3a8 <LCD_write_char+0x5e>
 3ac:	00 c0       	rjmp	.+0      	; 0x3ae <LCD_write_char+0x64>
 3ae:	00 00       	nop
 3b0:	4c 2f       	mov	r20, r28
 3b2:	41 70       	andi	r20, 0x01	; 1
 3b4:	64 e0       	ldi	r22, 0x04	; 4
 3b6:	82 e0       	ldi	r24, 0x02	; 2
 3b8:	68 d0       	rcall	.+208    	; 0x48a <DIO_SetPinVal>
 3ba:	c1 fb       	bst	r28, 1
 3bc:	44 27       	eor	r20, r20
 3be:	40 f9       	bld	r20, 0
 3c0:	65 e0       	ldi	r22, 0x05	; 5
 3c2:	82 e0       	ldi	r24, 0x02	; 2
 3c4:	62 d0       	rcall	.+196    	; 0x48a <DIO_SetPinVal>
 3c6:	c2 fb       	bst	r28, 2
 3c8:	44 27       	eor	r20, r20
 3ca:	40 f9       	bld	r20, 0
 3cc:	66 e0       	ldi	r22, 0x06	; 6
 3ce:	82 e0       	ldi	r24, 0x02	; 2
 3d0:	5c d0       	rcall	.+184    	; 0x48a <DIO_SetPinVal>
 3d2:	c3 fb       	bst	r28, 3
 3d4:	44 27       	eor	r20, r20
 3d6:	40 f9       	bld	r20, 0
 3d8:	67 e0       	ldi	r22, 0x07	; 7
 3da:	82 e0       	ldi	r24, 0x02	; 2
 3dc:	56 d0       	rcall	.+172    	; 0x48a <DIO_SetPinVal>
 3de:	41 e0       	ldi	r20, 0x01	; 1
 3e0:	66 e0       	ldi	r22, 0x06	; 6
 3e2:	83 e0       	ldi	r24, 0x03	; 3
 3e4:	52 d0       	rcall	.+164    	; 0x48a <DIO_SetPinVal>
 3e6:	83 ef       	ldi	r24, 0xF3	; 243
 3e8:	91 e0       	ldi	r25, 0x01	; 1
 3ea:	01 97       	sbiw	r24, 0x01	; 1
 3ec:	f1 f7       	brne	.-4      	; 0x3ea <LCD_write_char+0xa0>
 3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <LCD_write_char+0xa6>
 3f0:	00 00       	nop
 3f2:	40 e0       	ldi	r20, 0x00	; 0
 3f4:	66 e0       	ldi	r22, 0x06	; 6
 3f6:	83 e0       	ldi	r24, 0x03	; 3
 3f8:	48 d0       	rcall	.+144    	; 0x48a <DIO_SetPinVal>
 3fa:	83 ef       	ldi	r24, 0xF3	; 243
 3fc:	91 e0       	ldi	r25, 0x01	; 1
 3fe:	01 97       	sbiw	r24, 0x01	; 1
 400:	f1 f7       	brne	.-4      	; 0x3fe <LCD_write_char+0xb4>
 402:	00 c0       	rjmp	.+0      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 404:	00 00       	nop
 406:	cf 91       	pop	r28
 408:	08 95       	ret

0000040a <LCD_SEND_STRING>:
 40a:	cf 93       	push	r28
 40c:	df 93       	push	r29
 40e:	ec 01       	movw	r28, r24
 410:	88 81       	ld	r24, Y
 412:	88 23       	and	r24, r24
 414:	29 f0       	breq	.+10     	; 0x420 <LCD_SEND_STRING+0x16>
 416:	21 96       	adiw	r28, 0x01	; 1
 418:	98 df       	rcall	.-208    	; 0x34a <LCD_write_char>
 41a:	89 91       	ld	r24, Y+
 41c:	81 11       	cpse	r24, r1
 41e:	fc cf       	rjmp	.-8      	; 0x418 <LCD_SEND_STRING+0xe>
 420:	df 91       	pop	r29
 422:	cf 91       	pop	r28
 424:	08 95       	ret

00000426 <LCD_MOVE_CURSOR>:
	//Rows Range (1,4)
	//Columns Range (1,20)
	//Function that updates Address Counter (AC)
	
	unsigned char data = 0x80;
	if(row>4||row<1||column>20||column<1)
 426:	9f ef       	ldi	r25, 0xFF	; 255
 428:	98 0f       	add	r25, r24
 42a:	94 30       	cpi	r25, 0x04	; 4
 42c:	c0 f4       	brcc	.+48     	; 0x45e <LCD_MOVE_CURSOR+0x38>
 42e:	9f ef       	ldi	r25, 0xFF	; 255
 430:	96 0f       	add	r25, r22
 432:	94 31       	cpi	r25, 0x14	; 20
 434:	b0 f4       	brcc	.+44     	; 0x462 <LCD_MOVE_CURSOR+0x3c>
	{
		data=0x80;                       //Upper Left Location on Screen
	}
	else if(row==1)
 436:	81 30       	cpi	r24, 0x01	; 1
 438:	19 f4       	brne	.+6      	; 0x440 <LCD_MOVE_CURSOR+0x1a>
	{
		data=0x80+column-1 ;
 43a:	8f e7       	ldi	r24, 0x7F	; 127
 43c:	86 0f       	add	r24, r22
 43e:	14 c0       	rjmp	.+40     	; 0x468 <LCD_MOVE_CURSOR+0x42>
	}
	else if (row==2)
 440:	82 30       	cpi	r24, 0x02	; 2
 442:	19 f4       	brne	.+6      	; 0x44a <LCD_MOVE_CURSOR+0x24>
	{
		data=0xc0+column-1;
 444:	8f eb       	ldi	r24, 0xBF	; 191
 446:	86 0f       	add	r24, r22
 448:	0f c0       	rjmp	.+30     	; 0x468 <LCD_MOVE_CURSOR+0x42>
	}
	else if (row==3)
 44a:	83 30       	cpi	r24, 0x03	; 3
 44c:	19 f4       	brne	.+6      	; 0x454 <LCD_MOVE_CURSOR+0x2e>
	{
		data=0x94+column-1;
 44e:	83 e9       	ldi	r24, 0x93	; 147
 450:	86 0f       	add	r24, r22
 452:	0a c0       	rjmp	.+20     	; 0x468 <LCD_MOVE_CURSOR+0x42>
	}
	else if (row==4)
 454:	84 30       	cpi	r24, 0x04	; 4
 456:	39 f4       	brne	.+14     	; 0x466 <LCD_MOVE_CURSOR+0x40>
	{
		data=0xD4+column-1;
 458:	83 ed       	ldi	r24, 0xD3	; 211
 45a:	86 0f       	add	r24, r22
 45c:	05 c0       	rjmp	.+10     	; 0x468 <LCD_MOVE_CURSOR+0x42>
	//Function that updates Address Counter (AC)
	
	unsigned char data = 0x80;
	if(row>4||row<1||column>20||column<1)
	{
		data=0x80;                       //Upper Left Location on Screen
 45e:	80 e8       	ldi	r24, 0x80	; 128
 460:	03 c0       	rjmp	.+6      	; 0x468 <LCD_MOVE_CURSOR+0x42>
 462:	80 e8       	ldi	r24, 0x80	; 128
 464:	01 c0       	rjmp	.+2      	; 0x468 <LCD_MOVE_CURSOR+0x42>
{
	//Rows Range (1,4)
	//Columns Range (1,20)
	//Function that updates Address Counter (AC)
	
	unsigned char data = 0x80;
 466:	80 e8       	ldi	r24, 0x80	; 128
	}
	else if (row==4)
	{
		data=0xD4+column-1;
	}
	LCD_instruction(data);
 468:	d9 de       	rcall	.-590    	; 0x21c <LCD_instruction>
 46a:	89 ef       	ldi	r24, 0xF9	; 249
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	01 97       	sbiw	r24, 0x01	; 1
 470:	f1 f7       	brne	.-4      	; 0x46e <LCD_MOVE_CURSOR+0x48>
 472:	00 c0       	rjmp	.+0      	; 0x474 <LCD_MOVE_CURSOR+0x4e>
 474:	00 00       	nop
 476:	08 95       	ret

00000478 <DIO_init>:
				break;
		case PC:
				TOG_BIT(PORTC, pinNum);		
				break;
		case PD:
				TOG_BIT(PORTD, pinNum);	
 478:	8f e0       	ldi	r24, 0x0F	; 15
 47a:	8a bb       	out	0x1a, r24	; 26
 47c:	8f eb       	ldi	r24, 0xBF	; 191
 47e:	87 bb       	out	0x17, r24	; 23
 480:	8f ef       	ldi	r24, 0xFF	; 255
 482:	84 bb       	out	0x14, r24	; 20
 484:	8e ef       	ldi	r24, 0xFE	; 254
 486:	81 bb       	out	0x11, r24	; 17
 488:	08 95       	ret

0000048a <DIO_SetPinVal>:
 48a:	81 30       	cpi	r24, 0x01	; 1
 48c:	01 f1       	breq	.+64     	; 0x4ce <DIO_SetPinVal+0x44>
 48e:	30 f0       	brcs	.+12     	; 0x49c <DIO_SetPinVal+0x12>
 490:	82 30       	cpi	r24, 0x02	; 2
 492:	b1 f1       	breq	.+108    	; 0x500 <DIO_SetPinVal+0x76>
 494:	83 30       	cpi	r24, 0x03	; 3
 496:	09 f4       	brne	.+2      	; 0x49a <DIO_SetPinVal+0x10>
 498:	4c c0       	rjmp	.+152    	; 0x532 <DIO_SetPinVal+0xa8>
 49a:	08 95       	ret
 49c:	41 30       	cpi	r20, 0x01	; 1
 49e:	59 f4       	brne	.+22     	; 0x4b6 <DIO_SetPinVal+0x2c>
 4a0:	2b b3       	in	r18, 0x1b	; 27
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	02 c0       	rjmp	.+4      	; 0x4ac <DIO_SetPinVal+0x22>
 4a8:	88 0f       	add	r24, r24
 4aa:	99 1f       	adc	r25, r25
 4ac:	6a 95       	dec	r22
 4ae:	e2 f7       	brpl	.-8      	; 0x4a8 <DIO_SetPinVal+0x1e>
 4b0:	82 2b       	or	r24, r18
 4b2:	8b bb       	out	0x1b, r24	; 27
 4b4:	08 95       	ret
 4b6:	2b b3       	in	r18, 0x1b	; 27
 4b8:	81 e0       	ldi	r24, 0x01	; 1
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <DIO_SetPinVal+0x38>
 4be:	88 0f       	add	r24, r24
 4c0:	99 1f       	adc	r25, r25
 4c2:	6a 95       	dec	r22
 4c4:	e2 f7       	brpl	.-8      	; 0x4be <DIO_SetPinVal+0x34>
 4c6:	80 95       	com	r24
 4c8:	82 23       	and	r24, r18
 4ca:	8b bb       	out	0x1b, r24	; 27
 4cc:	08 95       	ret
 4ce:	41 30       	cpi	r20, 0x01	; 1
 4d0:	59 f4       	brne	.+22     	; 0x4e8 <DIO_SetPinVal+0x5e>
 4d2:	28 b3       	in	r18, 0x18	; 24
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	02 c0       	rjmp	.+4      	; 0x4de <DIO_SetPinVal+0x54>
 4da:	88 0f       	add	r24, r24
 4dc:	99 1f       	adc	r25, r25
 4de:	6a 95       	dec	r22
 4e0:	e2 f7       	brpl	.-8      	; 0x4da <DIO_SetPinVal+0x50>
 4e2:	82 2b       	or	r24, r18
 4e4:	88 bb       	out	0x18, r24	; 24
 4e6:	08 95       	ret
 4e8:	28 b3       	in	r18, 0x18	; 24
 4ea:	81 e0       	ldi	r24, 0x01	; 1
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <DIO_SetPinVal+0x6a>
 4f0:	88 0f       	add	r24, r24
 4f2:	99 1f       	adc	r25, r25
 4f4:	6a 95       	dec	r22
 4f6:	e2 f7       	brpl	.-8      	; 0x4f0 <DIO_SetPinVal+0x66>
 4f8:	80 95       	com	r24
 4fa:	82 23       	and	r24, r18
 4fc:	88 bb       	out	0x18, r24	; 24
 4fe:	08 95       	ret
 500:	41 30       	cpi	r20, 0x01	; 1
 502:	59 f4       	brne	.+22     	; 0x51a <DIO_SetPinVal+0x90>
 504:	25 b3       	in	r18, 0x15	; 21
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	02 c0       	rjmp	.+4      	; 0x510 <DIO_SetPinVal+0x86>
 50c:	88 0f       	add	r24, r24
 50e:	99 1f       	adc	r25, r25
 510:	6a 95       	dec	r22
 512:	e2 f7       	brpl	.-8      	; 0x50c <DIO_SetPinVal+0x82>
 514:	82 2b       	or	r24, r18
 516:	85 bb       	out	0x15, r24	; 21
 518:	08 95       	ret
 51a:	25 b3       	in	r18, 0x15	; 21
 51c:	81 e0       	ldi	r24, 0x01	; 1
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	02 c0       	rjmp	.+4      	; 0x526 <DIO_SetPinVal+0x9c>
 522:	88 0f       	add	r24, r24
 524:	99 1f       	adc	r25, r25
 526:	6a 95       	dec	r22
 528:	e2 f7       	brpl	.-8      	; 0x522 <DIO_SetPinVal+0x98>
 52a:	80 95       	com	r24
 52c:	82 23       	and	r24, r18
 52e:	85 bb       	out	0x15, r24	; 21
 530:	08 95       	ret
 532:	41 30       	cpi	r20, 0x01	; 1
 534:	59 f4       	brne	.+22     	; 0x54c <DIO_SetPinVal+0xc2>
 536:	22 b3       	in	r18, 0x12	; 18
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	02 c0       	rjmp	.+4      	; 0x542 <DIO_SetPinVal+0xb8>
 53e:	88 0f       	add	r24, r24
 540:	99 1f       	adc	r25, r25
 542:	6a 95       	dec	r22
 544:	e2 f7       	brpl	.-8      	; 0x53e <DIO_SetPinVal+0xb4>
 546:	82 2b       	or	r24, r18
 548:	82 bb       	out	0x12, r24	; 18
 54a:	08 95       	ret
 54c:	22 b3       	in	r18, 0x12	; 18
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	02 c0       	rjmp	.+4      	; 0x558 <DIO_SetPinVal+0xce>
 554:	88 0f       	add	r24, r24
 556:	99 1f       	adc	r25, r25
 558:	6a 95       	dec	r22
 55a:	e2 f7       	brpl	.-8      	; 0x554 <DIO_SetPinVal+0xca>
 55c:	80 95       	com	r24
 55e:	82 23       	and	r24, r18
 560:	82 bb       	out	0x12, r24	; 18
 562:	08 95       	ret

00000564 <DIO_EN_PULLUP>:
	}
}

void DIO_EN_PULLUP(u8 portName, u8 pinNum)
{
	switch(portName)
 564:	81 30       	cpi	r24, 0x01	; 1
 566:	89 f0       	breq	.+34     	; 0x58a <DIO_EN_PULLUP+0x26>
 568:	28 f0       	brcs	.+10     	; 0x574 <DIO_EN_PULLUP+0x10>
 56a:	82 30       	cpi	r24, 0x02	; 2
 56c:	c9 f0       	breq	.+50     	; 0x5a0 <DIO_EN_PULLUP+0x3c>
 56e:	83 30       	cpi	r24, 0x03	; 3
 570:	11 f1       	breq	.+68     	; 0x5b6 <DIO_EN_PULLUP+0x52>
 572:	08 95       	ret
	{
		case PA:
				SET_BIT(PINA, pinNum);	
 574:	29 b3       	in	r18, 0x19	; 25
 576:	81 e0       	ldi	r24, 0x01	; 1
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	02 c0       	rjmp	.+4      	; 0x580 <DIO_EN_PULLUP+0x1c>
 57c:	88 0f       	add	r24, r24
 57e:	99 1f       	adc	r25, r25
 580:	6a 95       	dec	r22
 582:	e2 f7       	brpl	.-8      	; 0x57c <DIO_EN_PULLUP+0x18>
 584:	82 2b       	or	r24, r18
 586:	89 bb       	out	0x19, r24	; 25
				break;
 588:	08 95       	ret
		case PB:
				SET_BIT(PINB, pinNum);	
 58a:	26 b3       	in	r18, 0x16	; 22
 58c:	81 e0       	ldi	r24, 0x01	; 1
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	02 c0       	rjmp	.+4      	; 0x596 <DIO_EN_PULLUP+0x32>
 592:	88 0f       	add	r24, r24
 594:	99 1f       	adc	r25, r25
 596:	6a 95       	dec	r22
 598:	e2 f7       	brpl	.-8      	; 0x592 <DIO_EN_PULLUP+0x2e>
 59a:	82 2b       	or	r24, r18
 59c:	86 bb       	out	0x16, r24	; 22
				break;
 59e:	08 95       	ret
		case PC:
				SET_BIT(PINC, pinNum);	
 5a0:	23 b3       	in	r18, 0x13	; 19
 5a2:	81 e0       	ldi	r24, 0x01	; 1
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	02 c0       	rjmp	.+4      	; 0x5ac <DIO_EN_PULLUP+0x48>
 5a8:	88 0f       	add	r24, r24
 5aa:	99 1f       	adc	r25, r25
 5ac:	6a 95       	dec	r22
 5ae:	e2 f7       	brpl	.-8      	; 0x5a8 <DIO_EN_PULLUP+0x44>
 5b0:	82 2b       	or	r24, r18
 5b2:	83 bb       	out	0x13, r24	; 19
				break;
 5b4:	08 95       	ret
		case PD:
				SET_BIT(PIND, pinNum);	
 5b6:	20 b3       	in	r18, 0x10	; 16
 5b8:	81 e0       	ldi	r24, 0x01	; 1
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	02 c0       	rjmp	.+4      	; 0x5c2 <DIO_EN_PULLUP+0x5e>
 5be:	88 0f       	add	r24, r24
 5c0:	99 1f       	adc	r25, r25
 5c2:	6a 95       	dec	r22
 5c4:	e2 f7       	brpl	.-8      	; 0x5be <DIO_EN_PULLUP+0x5a>
 5c6:	82 2b       	or	r24, r18
 5c8:	80 bb       	out	0x10, r24	; 16
 5ca:	08 95       	ret

000005cc <__vector_12>:
{
	SPICallbackFunc = PtrToFunc;
}

void __vector_12 (void) __attribute__ ((signal,used, externally_visible));
 5cc:	1f 92       	push	r1
 5ce:	0f 92       	push	r0
 5d0:	0f b6       	in	r0, 0x3f	; 63
 5d2:	0f 92       	push	r0
 5d4:	11 24       	eor	r1, r1
 5d6:	2f 93       	push	r18
 5d8:	3f 93       	push	r19
 5da:	4f 93       	push	r20
 5dc:	5f 93       	push	r21
 5de:	6f 93       	push	r22
 5e0:	7f 93       	push	r23
 5e2:	8f 93       	push	r24
 5e4:	9f 93       	push	r25
 5e6:	af 93       	push	r26
 5e8:	bf 93       	push	r27
 5ea:	ef 93       	push	r30
 5ec:	ff 93       	push	r31
 5ee:	e0 91 99 00 	lds	r30, 0x0099	; 0x800099 <SPICallbackFunc>
 5f2:	f0 91 9a 00 	lds	r31, 0x009A	; 0x80009a <SPICallbackFunc+0x1>
 5f6:	30 97       	sbiw	r30, 0x00	; 0
 5f8:	09 f0       	breq	.+2      	; 0x5fc <__vector_12+0x30>
 5fa:	09 95       	icall
 5fc:	ff 91       	pop	r31
 5fe:	ef 91       	pop	r30
 600:	bf 91       	pop	r27
 602:	af 91       	pop	r26
 604:	9f 91       	pop	r25
 606:	8f 91       	pop	r24
 608:	7f 91       	pop	r23
 60a:	6f 91       	pop	r22
 60c:	5f 91       	pop	r21
 60e:	4f 91       	pop	r20
 610:	3f 91       	pop	r19
 612:	2f 91       	pop	r18
 614:	0f 90       	pop	r0
 616:	0f be       	out	0x3f, r0	; 63
 618:	0f 90       	pop	r0
 61a:	1f 90       	pop	r1
 61c:	18 95       	reti

0000061e <UART_init>:
	while( data != '\0')
	{
		USART_Transmit(*data);
		data++;
	}
}
 61e:	80 b5       	in	r24, 0x20	; 32
 620:	80 68       	ori	r24, 0x80	; 128
 622:	80 bd       	out	0x20, r24	; 32
 624:	83 e3       	ldi	r24, 0x33	; 51
 626:	89 b9       	out	0x09, r24	; 9
 628:	80 b5       	in	r24, 0x20	; 32
 62a:	8f 77       	andi	r24, 0x7F	; 127
 62c:	80 bd       	out	0x20, r24	; 32
 62e:	80 b5       	in	r24, 0x20	; 32
 630:	82 60       	ori	r24, 0x02	; 2
 632:	80 bd       	out	0x20, r24	; 32
 634:	80 b5       	in	r24, 0x20	; 32
 636:	84 60       	ori	r24, 0x04	; 4
 638:	80 bd       	out	0x20, r24	; 32
 63a:	52 98       	cbi	0x0a, 2	; 10
 63c:	80 b5       	in	r24, 0x20	; 32
 63e:	80 64       	ori	r24, 0x40	; 64
 640:	80 bd       	out	0x20, r24	; 32
 642:	53 9b       	sbis	0x0a, 3	; 10
 644:	03 c0       	rjmp	.+6      	; 0x64c <UART_init+0x2e>
 646:	80 b5       	in	r24, 0x20	; 32
 648:	8e 7f       	andi	r24, 0xFE	; 254
 64a:	80 bd       	out	0x20, r24	; 32
 64c:	54 9b       	sbis	0x0a, 4	; 10
 64e:	03 c0       	rjmp	.+6      	; 0x656 <UART_init+0x38>
 650:	80 b5       	in	r24, 0x20	; 32
 652:	8e 7f       	andi	r24, 0xFE	; 254
 654:	80 bd       	out	0x20, r24	; 32
 656:	80 b5       	in	r24, 0x20	; 32
 658:	8f 7e       	andi	r24, 0xEF	; 239
 65a:	80 bd       	out	0x20, r24	; 32
 65c:	80 b5       	in	r24, 0x20	; 32
 65e:	8f 7d       	andi	r24, 0xDF	; 223
 660:	80 bd       	out	0x20, r24	; 32
 662:	80 b5       	in	r24, 0x20	; 32
 664:	87 7f       	andi	r24, 0xF7	; 247
 666:	80 bd       	out	0x20, r24	; 32
 668:	08 95       	ret

0000066a <UART_RX_ENABLE>:
 66a:	54 9a       	sbi	0x0a, 4	; 10
 66c:	08 95       	ret

0000066e <UART_TX_ENABLE>:
 66e:	53 9a       	sbi	0x0a, 3	; 10
 670:	08 95       	ret

00000672 <USART_Receive>:
 672:	5f 9b       	sbis	0x0b, 7	; 11
 674:	fe cf       	rjmp	.-4      	; 0x672 <USART_Receive>
 676:	8c b1       	in	r24, 0x0c	; 12
 678:	08 95       	ret

0000067a <UART_receiveString>:

void UART_receiveString(u8 *Str)
{
 67a:	ef 92       	push	r14
 67c:	ff 92       	push	r15
 67e:	0f 93       	push	r16
 680:	1f 93       	push	r17
 682:	cf 93       	push	r28
 684:	7c 01       	movw	r14, r24
	u8 i = 0;
	Str[i] = USART_Receive();
 686:	f5 df       	rcall	.-22     	; 0x672 <USART_Receive>
 688:	f7 01       	movw	r30, r14
 68a:	80 83       	st	Z, r24
	while(Str[i] != '#')
 68c:	83 32       	cpi	r24, 0x23	; 35
 68e:	59 f0       	breq	.+22     	; 0x6a6 <UART_receiveString+0x2c>
 690:	c0 e0       	ldi	r28, 0x00	; 0
	{
		i++;
 692:	cf 5f       	subi	r28, 0xFF	; 255
		Str[i] = USART_Receive();
 694:	87 01       	movw	r16, r14
 696:	0c 0f       	add	r16, r28
 698:	11 1d       	adc	r17, r1
 69a:	eb df       	rcall	.-42     	; 0x672 <USART_Receive>
 69c:	f8 01       	movw	r30, r16
 69e:	80 83       	st	Z, r24

void UART_receiveString(u8 *Str)
{
	u8 i = 0;
	Str[i] = USART_Receive();
	while(Str[i] != '#')
 6a0:	83 32       	cpi	r24, 0x23	; 35
 6a2:	b9 f7       	brne	.-18     	; 0x692 <UART_receiveString+0x18>
 6a4:	01 c0       	rjmp	.+2      	; 0x6a8 <UART_receiveString+0x2e>
 6a6:	87 01       	movw	r16, r14
	{
		i++;
		Str[i] = USART_Receive();
	}
	Str[i] = '\0';
 6a8:	f8 01       	movw	r30, r16
 6aa:	10 82       	st	Z, r1
}
 6ac:	cf 91       	pop	r28
 6ae:	1f 91       	pop	r17
 6b0:	0f 91       	pop	r16
 6b2:	ff 90       	pop	r15
 6b4:	ef 90       	pop	r14
 6b6:	08 95       	ret

000006b8 <__divmodsi4>:
 6b8:	05 2e       	mov	r0, r21
 6ba:	97 fb       	bst	r25, 7
 6bc:	16 f4       	brtc	.+4      	; 0x6c2 <__divmodsi4+0xa>
 6be:	00 94       	com	r0
 6c0:	0f d0       	rcall	.+30     	; 0x6e0 <__negsi2>
 6c2:	57 fd       	sbrc	r21, 7
 6c4:	05 d0       	rcall	.+10     	; 0x6d0 <__divmodsi4_neg2>
 6c6:	14 d0       	rcall	.+40     	; 0x6f0 <__udivmodsi4>
 6c8:	07 fc       	sbrc	r0, 7
 6ca:	02 d0       	rcall	.+4      	; 0x6d0 <__divmodsi4_neg2>
 6cc:	46 f4       	brtc	.+16     	; 0x6de <__divmodsi4_exit>
 6ce:	08 c0       	rjmp	.+16     	; 0x6e0 <__negsi2>

000006d0 <__divmodsi4_neg2>:
 6d0:	50 95       	com	r21
 6d2:	40 95       	com	r20
 6d4:	30 95       	com	r19
 6d6:	21 95       	neg	r18
 6d8:	3f 4f       	sbci	r19, 0xFF	; 255
 6da:	4f 4f       	sbci	r20, 0xFF	; 255
 6dc:	5f 4f       	sbci	r21, 0xFF	; 255

000006de <__divmodsi4_exit>:
 6de:	08 95       	ret

000006e0 <__negsi2>:
 6e0:	90 95       	com	r25
 6e2:	80 95       	com	r24
 6e4:	70 95       	com	r23
 6e6:	61 95       	neg	r22
 6e8:	7f 4f       	sbci	r23, 0xFF	; 255
 6ea:	8f 4f       	sbci	r24, 0xFF	; 255
 6ec:	9f 4f       	sbci	r25, 0xFF	; 255
 6ee:	08 95       	ret

000006f0 <__udivmodsi4>:
 6f0:	a1 e2       	ldi	r26, 0x21	; 33
 6f2:	1a 2e       	mov	r1, r26
 6f4:	aa 1b       	sub	r26, r26
 6f6:	bb 1b       	sub	r27, r27
 6f8:	fd 01       	movw	r30, r26
 6fa:	0d c0       	rjmp	.+26     	; 0x716 <__udivmodsi4_ep>

000006fc <__udivmodsi4_loop>:
 6fc:	aa 1f       	adc	r26, r26
 6fe:	bb 1f       	adc	r27, r27
 700:	ee 1f       	adc	r30, r30
 702:	ff 1f       	adc	r31, r31
 704:	a2 17       	cp	r26, r18
 706:	b3 07       	cpc	r27, r19
 708:	e4 07       	cpc	r30, r20
 70a:	f5 07       	cpc	r31, r21
 70c:	20 f0       	brcs	.+8      	; 0x716 <__udivmodsi4_ep>
 70e:	a2 1b       	sub	r26, r18
 710:	b3 0b       	sbc	r27, r19
 712:	e4 0b       	sbc	r30, r20
 714:	f5 0b       	sbc	r31, r21

00000716 <__udivmodsi4_ep>:
 716:	66 1f       	adc	r22, r22
 718:	77 1f       	adc	r23, r23
 71a:	88 1f       	adc	r24, r24
 71c:	99 1f       	adc	r25, r25
 71e:	1a 94       	dec	r1
 720:	69 f7       	brne	.-38     	; 0x6fc <__udivmodsi4_loop>
 722:	60 95       	com	r22
 724:	70 95       	com	r23
 726:	80 95       	com	r24
 728:	90 95       	com	r25
 72a:	9b 01       	movw	r18, r22
 72c:	ac 01       	movw	r20, r24
 72e:	bd 01       	movw	r22, r26
 730:	cf 01       	movw	r24, r30
 732:	08 95       	ret

00000734 <random_r>:
 734:	8f 92       	push	r8
 736:	9f 92       	push	r9
 738:	af 92       	push	r10
 73a:	bf 92       	push	r11
 73c:	cf 92       	push	r12
 73e:	df 92       	push	r13
 740:	ef 92       	push	r14
 742:	ff 92       	push	r15
 744:	cf 93       	push	r28
 746:	df 93       	push	r29
 748:	ec 01       	movw	r28, r24
 74a:	68 81       	ld	r22, Y
 74c:	79 81       	ldd	r23, Y+1	; 0x01
 74e:	8a 81       	ldd	r24, Y+2	; 0x02
 750:	9b 81       	ldd	r25, Y+3	; 0x03
 752:	61 15       	cp	r22, r1
 754:	71 05       	cpc	r23, r1
 756:	81 05       	cpc	r24, r1
 758:	91 05       	cpc	r25, r1
 75a:	21 f4       	brne	.+8      	; 0x764 <random_r+0x30>
 75c:	64 e2       	ldi	r22, 0x24	; 36
 75e:	79 ed       	ldi	r23, 0xD9	; 217
 760:	8b e5       	ldi	r24, 0x5B	; 91
 762:	97 e0       	ldi	r25, 0x07	; 7
 764:	2d e1       	ldi	r18, 0x1D	; 29
 766:	33 ef       	ldi	r19, 0xF3	; 243
 768:	41 e0       	ldi	r20, 0x01	; 1
 76a:	50 e0       	ldi	r21, 0x00	; 0
 76c:	a5 df       	rcall	.-182    	; 0x6b8 <__divmodsi4>
 76e:	49 01       	movw	r8, r18
 770:	5a 01       	movw	r10, r20
 772:	9b 01       	movw	r18, r22
 774:	ac 01       	movw	r20, r24
 776:	a7 ea       	ldi	r26, 0xA7	; 167
 778:	b1 e4       	ldi	r27, 0x41	; 65
 77a:	81 d0       	rcall	.+258    	; 0x87e <__muluhisi3>
 77c:	6b 01       	movw	r12, r22
 77e:	7c 01       	movw	r14, r24
 780:	ac ee       	ldi	r26, 0xEC	; 236
 782:	b4 ef       	ldi	r27, 0xF4	; 244
 784:	a5 01       	movw	r20, r10
 786:	94 01       	movw	r18, r8
 788:	86 d0       	rcall	.+268    	; 0x896 <__mulohisi3>
 78a:	dc 01       	movw	r26, r24
 78c:	cb 01       	movw	r24, r22
 78e:	8c 0d       	add	r24, r12
 790:	9d 1d       	adc	r25, r13
 792:	ae 1d       	adc	r26, r14
 794:	bf 1d       	adc	r27, r15
 796:	b7 ff       	sbrs	r27, 7
 798:	03 c0       	rjmp	.+6      	; 0x7a0 <random_r+0x6c>
 79a:	01 97       	sbiw	r24, 0x01	; 1
 79c:	a1 09       	sbc	r26, r1
 79e:	b0 48       	sbci	r27, 0x80	; 128
 7a0:	88 83       	st	Y, r24
 7a2:	99 83       	std	Y+1, r25	; 0x01
 7a4:	aa 83       	std	Y+2, r26	; 0x02
 7a6:	bb 83       	std	Y+3, r27	; 0x03
 7a8:	bc 01       	movw	r22, r24
 7aa:	cd 01       	movw	r24, r26
 7ac:	9f 77       	andi	r25, 0x7F	; 127
 7ae:	df 91       	pop	r29
 7b0:	cf 91       	pop	r28
 7b2:	ff 90       	pop	r15
 7b4:	ef 90       	pop	r14
 7b6:	df 90       	pop	r13
 7b8:	cf 90       	pop	r12
 7ba:	bf 90       	pop	r11
 7bc:	af 90       	pop	r10
 7be:	9f 90       	pop	r9
 7c0:	8f 90       	pop	r8
 7c2:	08 95       	ret

000007c4 <random>:
 7c4:	8f 92       	push	r8
 7c6:	9f 92       	push	r9
 7c8:	af 92       	push	r10
 7ca:	bf 92       	push	r11
 7cc:	cf 92       	push	r12
 7ce:	df 92       	push	r13
 7d0:	ef 92       	push	r14
 7d2:	ff 92       	push	r15
 7d4:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 7d8:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 7dc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 7e0:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 7e4:	61 15       	cp	r22, r1
 7e6:	71 05       	cpc	r23, r1
 7e8:	81 05       	cpc	r24, r1
 7ea:	91 05       	cpc	r25, r1
 7ec:	21 f4       	brne	.+8      	; 0x7f6 <random+0x32>
 7ee:	64 e2       	ldi	r22, 0x24	; 36
 7f0:	79 ed       	ldi	r23, 0xD9	; 217
 7f2:	8b e5       	ldi	r24, 0x5B	; 91
 7f4:	97 e0       	ldi	r25, 0x07	; 7
 7f6:	2d e1       	ldi	r18, 0x1D	; 29
 7f8:	33 ef       	ldi	r19, 0xF3	; 243
 7fa:	41 e0       	ldi	r20, 0x01	; 1
 7fc:	50 e0       	ldi	r21, 0x00	; 0
 7fe:	5c df       	rcall	.-328    	; 0x6b8 <__divmodsi4>
 800:	49 01       	movw	r8, r18
 802:	5a 01       	movw	r10, r20
 804:	9b 01       	movw	r18, r22
 806:	ac 01       	movw	r20, r24
 808:	a7 ea       	ldi	r26, 0xA7	; 167
 80a:	b1 e4       	ldi	r27, 0x41	; 65
 80c:	38 d0       	rcall	.+112    	; 0x87e <__muluhisi3>
 80e:	6b 01       	movw	r12, r22
 810:	7c 01       	movw	r14, r24
 812:	ac ee       	ldi	r26, 0xEC	; 236
 814:	b4 ef       	ldi	r27, 0xF4	; 244
 816:	a5 01       	movw	r20, r10
 818:	94 01       	movw	r18, r8
 81a:	3d d0       	rcall	.+122    	; 0x896 <__mulohisi3>
 81c:	dc 01       	movw	r26, r24
 81e:	cb 01       	movw	r24, r22
 820:	8c 0d       	add	r24, r12
 822:	9d 1d       	adc	r25, r13
 824:	ae 1d       	adc	r26, r14
 826:	bf 1d       	adc	r27, r15
 828:	b7 ff       	sbrs	r27, 7
 82a:	03 c0       	rjmp	.+6      	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 82c:	01 97       	sbiw	r24, 0x01	; 1
 82e:	a1 09       	sbc	r26, r1
 830:	b0 48       	sbci	r27, 0x80	; 128
 832:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 836:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 83a:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 83e:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 842:	bc 01       	movw	r22, r24
 844:	cd 01       	movw	r24, r26
 846:	9f 77       	andi	r25, 0x7F	; 127
 848:	ff 90       	pop	r15
 84a:	ef 90       	pop	r14
 84c:	df 90       	pop	r13
 84e:	cf 90       	pop	r12
 850:	bf 90       	pop	r11
 852:	af 90       	pop	r10
 854:	9f 90       	pop	r9
 856:	8f 90       	pop	r8
 858:	08 95       	ret

0000085a <srandom>:
 85a:	60 93 60 00 	sts	0x0060, r22	; 0x800060 <__DATA_REGION_ORIGIN__>
 85e:	70 93 61 00 	sts	0x0061, r23	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 862:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 866:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 86a:	08 95       	ret

0000086c <strcmp>:
 86c:	fb 01       	movw	r30, r22
 86e:	dc 01       	movw	r26, r24
 870:	8d 91       	ld	r24, X+
 872:	01 90       	ld	r0, Z+
 874:	80 19       	sub	r24, r0
 876:	01 10       	cpse	r0, r1
 878:	d9 f3       	breq	.-10     	; 0x870 <strcmp+0x4>
 87a:	99 0b       	sbc	r25, r25
 87c:	08 95       	ret

0000087e <__muluhisi3>:
 87e:	0f d0       	rcall	.+30     	; 0x89e <__umulhisi3>
 880:	a5 9f       	mul	r26, r21
 882:	90 0d       	add	r25, r0
 884:	b4 9f       	mul	r27, r20
 886:	90 0d       	add	r25, r0
 888:	a4 9f       	mul	r26, r20
 88a:	80 0d       	add	r24, r0
 88c:	91 1d       	adc	r25, r1
 88e:	11 24       	eor	r1, r1
 890:	08 95       	ret

00000892 <__mulshisi3>:
 892:	b7 ff       	sbrs	r27, 7
 894:	f4 cf       	rjmp	.-24     	; 0x87e <__muluhisi3>

00000896 <__mulohisi3>:
 896:	f3 df       	rcall	.-26     	; 0x87e <__muluhisi3>
 898:	82 1b       	sub	r24, r18
 89a:	93 0b       	sbc	r25, r19
 89c:	08 95       	ret

0000089e <__umulhisi3>:
 89e:	a2 9f       	mul	r26, r18
 8a0:	b0 01       	movw	r22, r0
 8a2:	b3 9f       	mul	r27, r19
 8a4:	c0 01       	movw	r24, r0
 8a6:	a3 9f       	mul	r26, r19
 8a8:	70 0d       	add	r23, r0
 8aa:	81 1d       	adc	r24, r1
 8ac:	11 24       	eor	r1, r1
 8ae:	91 1d       	adc	r25, r1
 8b0:	b2 9f       	mul	r27, r18
 8b2:	70 0d       	add	r23, r0
 8b4:	81 1d       	adc	r24, r1
 8b6:	11 24       	eor	r1, r1
 8b8:	91 1d       	adc	r25, r1
 8ba:	08 95       	ret

000008bc <_exit>:
 8bc:	f8 94       	cli

000008be <__stop_program>:
 8be:	ff cf       	rjmp	.-2      	; 0x8be <__stop_program>
